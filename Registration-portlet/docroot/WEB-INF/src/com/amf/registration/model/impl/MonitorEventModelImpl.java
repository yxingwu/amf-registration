/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.amf.registration.model.impl;

import com.amf.registration.model.MonitorEvent;
import com.amf.registration.model.MonitorEventModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MonitorEvent service. Represents a row in the &quot;amf_MonitorEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.amf.registration.model.MonitorEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MonitorEventImpl}.
 * </p>
 *
 * @author liferay
 * @see MonitorEventImpl
 * @see com.amf.registration.model.MonitorEvent
 * @see com.amf.registration.model.MonitorEventModel
 * @generated
 */
public class MonitorEventModelImpl extends BaseModelImpl<MonitorEvent>
	implements MonitorEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a monitor event model instance should use the {@link com.amf.registration.model.MonitorEvent} interface instead.
	 */
	public static final String TABLE_NAME = "amf_MonitorEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "ip", Types.VARCHAR },
			{ "eventDate", Types.TIMESTAMP },
			{ "eventType", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table amf_MonitorEvent (eventId LONG not null primary key,userId LONG,ip VARCHAR(75) null,eventDate DATE null,eventType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table amf_MonitorEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY monitorEvent.eventDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY amf_MonitorEvent.eventDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.amf.registration.model.MonitorEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.amf.registration.model.MonitorEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.amf.registration.model.MonitorEvent"),
			true);
	public static long EVENTTYPE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long EVENTDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.amf.registration.model.MonitorEvent"));

	public MonitorEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MonitorEvent.class;
	}

	@Override
	public String getModelClassName() {
		return MonitorEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventId", getEventId());
		attributes.put("userId", getUserId());
		attributes.put("ip", getIp());
		attributes.put("eventDate", getEventDate());
		attributes.put("eventType", getEventType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String ip = (String)attributes.get("ip");

		if (ip != null) {
			setIp(ip);
		}

		Date eventDate = (Date)attributes.get("eventDate");

		if (eventDate != null) {
			setEventDate(eventDate);
		}

		Integer eventType = (Integer)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getIp() {
		if (_ip == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_ip = ip;
	}

	@Override
	public Date getEventDate() {
		return _eventDate;
	}

	@Override
	public void setEventDate(Date eventDate) {
		_columnBitmask = -1L;

		_eventDate = eventDate;
	}

	@Override
	public int getEventType() {
		return _eventType;
	}

	@Override
	public void setEventType(int eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (!_setOriginalEventType) {
			_setOriginalEventType = true;

			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public int getOriginalEventType() {
		return _originalEventType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MonitorEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MonitorEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MonitorEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MonitorEventImpl monitorEventImpl = new MonitorEventImpl();

		monitorEventImpl.setEventId(getEventId());
		monitorEventImpl.setUserId(getUserId());
		monitorEventImpl.setIp(getIp());
		monitorEventImpl.setEventDate(getEventDate());
		monitorEventImpl.setEventType(getEventType());

		monitorEventImpl.resetOriginalValues();

		return monitorEventImpl;
	}

	@Override
	public int compareTo(MonitorEvent monitorEvent) {
		int value = 0;

		value = DateUtil.compareTo(getEventDate(), monitorEvent.getEventDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MonitorEvent)) {
			return false;
		}

		MonitorEvent monitorEvent = (MonitorEvent)obj;

		long primaryKey = monitorEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MonitorEventModelImpl monitorEventModelImpl = this;

		monitorEventModelImpl._originalUserId = monitorEventModelImpl._userId;

		monitorEventModelImpl._setOriginalUserId = false;

		monitorEventModelImpl._originalEventType = monitorEventModelImpl._eventType;

		monitorEventModelImpl._setOriginalEventType = false;

		monitorEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MonitorEvent> toCacheModel() {
		MonitorEventCacheModel monitorEventCacheModel = new MonitorEventCacheModel();

		monitorEventCacheModel.eventId = getEventId();

		monitorEventCacheModel.userId = getUserId();

		monitorEventCacheModel.ip = getIp();

		String ip = monitorEventCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			monitorEventCacheModel.ip = null;
		}

		Date eventDate = getEventDate();

		if (eventDate != null) {
			monitorEventCacheModel.eventDate = eventDate.getTime();
		}
		else {
			monitorEventCacheModel.eventDate = Long.MIN_VALUE;
		}

		monitorEventCacheModel.eventType = getEventType();

		return monitorEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{eventId=");
		sb.append(getEventId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", ip=");
		sb.append(getIp());
		sb.append(", eventDate=");
		sb.append(getEventDate());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.amf.registration.model.MonitorEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip</column-name><column-value><![CDATA[");
		sb.append(getIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDate</column-name><column-value><![CDATA[");
		sb.append(getEventDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MonitorEvent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MonitorEvent.class
		};
	private long _eventId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _ip;
	private Date _eventDate;
	private int _eventType;
	private int _originalEventType;
	private boolean _setOriginalEventType;
	private long _columnBitmask;
	private MonitorEvent _escapedModel;
}